//３０人の親候補からエリート順に１０人の親を残し、
//ルーレット選択で親となる１組のペアを選び、
//２点交叉から２人、一様交叉から一人の子孫を作る
//これを10回繰り返して３０人の子孫を作る


//エリート保存方式（十人残す）

  dir = "generation/generation"

  dname = dir + generation_num + "/"

  i = 11

  DIM list_num[29]
  DIM next_generation[9]
  DIM child[29]
  HASHTBL progress = HASH_CASECARE

  while i <= 40
    fname = dname + "log" + FORMAT(i, 2) + ".txt"
    fileID = FOPEN(fname, F_READ) // 読み込みモードでファイルを開く
      record = FGET(fileID, 1)
    FCLOSE(fileID)
    list_num[i-11] = length(record)
    IFB progress[list_num[i-11], HASH_EXISTS]
      progress[list_num[i-11] + 1] = record + "A"
    ELSE
      progress[list_num[i-11]] = record
    ENDIF
    i = i + 1
  wend

  QSORT(list_num, 1)

  i = 0
  while i < 10
    next_generation[i] = list_num[i]
    i = i + 1
  wend

//ここまでがエリート保存（next_generation)

//ここから交叉

child_num = 0
DIM generation_sum[9]
//10ペアの親から３０人の子孫を残す
k = 0
while k < 10
    //親を二人選ぶ(ルーレット選択？)
    i = 0
    sum = 0
    //10人の親のコマンドの合計を出す
    while i < 10
      sum = sum + next_generation[i]
      i = i + 1
    wend

  //その合計以下の乱数を生成
  random_num = random(sum)

  i = 0
  sum = 0
  //i以下の親のコマンドの合計を出す
  while i < 10
    sum = sum + next_generation[i]
    generation_sum[i] = sum
    i = i + 1
  wend

  //乱数を用いて親1を決定する
  i = 0
  while i < 10
    IFB random_num < generation_sum[i]
      pa1 = i
      break
    ENDIF
    i = i + 1
  wend

  //同様の手順で親2を決定する
  j = 0
  sum = 0
  while j < 10
    IFB j = i then
    ELSE
      sum = sum + next_generation[j]
      generation_sum[j] = sum
    ENDIF
    j = j + 1
  wend

  random_num = random(sum)

  i = 0
  while i < 10
    IFB random_num < generation_sum[i]
      pa2 = i
      break
    ENDIF
    i = i + 1
  wend

  parent1 = progress[next_generation[pa1]]
  parent2 = progress[next_generation[pa2]]

  //ここまでが親選択

  //ここから交叉

  parent_check = next_generation[pa1] - next_generation[pa2]
  handle_num = ABS(parent_check)

  i = 0

  //交叉前の親の要素を合わせる
  //parent2に足す
  IFB parent_check > 0 then
    while i < handle_num
      direction = random(100)
      IFB direction < 5
        parent2 = parent2 + "L"
      ELSEIF direction < 10
        parent2 = parent2 + "R"
      ELSEIF direction < 13
        parent2 = parent2 + "U"
      ELSEIF direction < 16
        parent2 = parent2 + "D"
      ELSE
        parent2 = parent2 + "S"
      ENDIF
      i = i + 1
    wend
    parent2 = REPLACE(parent2, "A", "")
    parent2 = parent2 + "A"

  ELSEIF parent_check < 0 then
    while i < handle_num
      direction = random(100)
      IFB direction < 5
        parent1 = parent1 + "L"
      ELSEIF direction < 10
        parent1 = parent1 + "R"
      ELSEIF direction < 13
        parent1 = parent1 + "U"
      ELSEIF direction < 16
        parent1 = parent1 + "D"
      ELSE
        parent1 = parent1 + "S"
      ENDIF
      i = i + 1
    wend
    parent1 = REPLACE(parent1, "A", "")
    parent1 = parent1 + "A"
  ENDIF


  //２点交叉から二人、一様交叉から一人の計三人を一組の親から作る

  //2点交叉
  //親のコマンド長さの数以下の乱数（交叉ポイント）
  crossing_point = random(length(parent1))

  //交叉
  crossing1 = copy(parent1, 1, crossing_point) + copy(parent2, crossing_point+1)
  crossing2 = copy(parent2, 1, crossing_point) + copy(parent1, crossing_point+1)

  crossing_point2 = random(length(parent1))

  child1 = copy(crossing1, 1, crossing_point2) + copy(crossing2, crossing_point2+1)
  child2 = copy(crossing2, 1, crossing_point2) + copy(crossing1, crossing_point2+1)

  //一様交叉
  child3 = ""
  i = 0
  while i < length(parent1)
    SELECT random(2)
      case 0
        child3 = child3 + copy(parent1, i, 1)
      case 1
        child3 = child3 + copy(parent2, i, 1)
    SELEND
    i = i + 1
  wend

  //子孫の配列にそれぞれの子孫を追加する
  child[child_num] = child1
  child_num = child_num + 1
  child[child_num] = child2
  child_num = child_num + 1
  child[child_num] = child3
  child_num = child_num + 1

  k = k + 1
wend

//ここまでが交叉と子孫残し

//突然変異(確率は1パーセント)
i = 0
while i < 30
  //乱数生成かつswitch文
  SELECT random(100)
    case 0
      //突然変異するポイント２か所の決定
      mutation_point1 = random(length(child[i]))
      mutation_char1 = copy(child[i], mutation_point1, 1)
      mutation_point2 = random(length(child[i]))
      mutation_char2 = copy(child[i], mutation_point2, 1)

      //突然変異させる
      //一つ目のポイント引く１の場所までを切りだし、
      //二つ目のポイントの文字列を足し、二つ目のポイントまでの文字列を切りだし、
      //一つ目のポイントの文字列を足し、最後の部分を補完するという形で実装
      IFB mutation_point1 < mutation_point2
        child_char = copy(child[i], 1, mutation_point1-1)
        chlid_char = child_char + mutation_char2
        child_char = child_char + copy(child[i], mutation_point1+1, mutation_point2-1)
        child_char = child_char + mutation_char1
        child_char = child_char + copy(child[i], mutation_point2+1)
      ELSEIF mutation_point2 < mutation_point1
        child_char = copy(child[i], 1, mutation_point2-1)
        chlid_char = child_char + mutation_char1
        child_char = child_char + copy(child[i], mutation_point2+1, mutation_point1-1)
        child_char = child_char + mutation_char2
        child_char = child_char + copy(child[i], mutation_point1+1)
      ELSEIF mutation_point1 = mutation_point2
        child_char = child[i]
      ENDIF

      child[i] = child_char
  SELEND
  i = i + 1
wend

//子孫のディレクトリ名作成
generation_num = generation_num + 1
dname = dir + generation_num

//ファイルを書き込むためのディレクトリの作成
mkdir_path = "mkdir c:\Users\Shizuma\Desktop\game\" + dname
Doscmd(mkdir_path)

//子孫の遺伝子データを書き出す
i = 11
while i <= 40
  fname = dname + "/log" + i + ".txt"
  fileID = FOPEN(fname, F_WRITE)  //ファイルを書き込み形式で開く
    FPUT(fileID, child[i-11])
  FCLOSE(fileID)
  i = i + 1
wend

print ("終了しました")
